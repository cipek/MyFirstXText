/**
 * generated by Xtext 2.17.0
 */
package org.xtext.example.mydsl.helloWeb.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.mydsl.helloWeb.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class HelloWebFactoryImpl extends EFactoryImpl implements HelloWebFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static HelloWebFactory init()
  {
    try
    {
      HelloWebFactory theHelloWebFactory = (HelloWebFactory)EPackage.Registry.INSTANCE.getEFactory(HelloWebPackage.eNS_URI);
      if (theHelloWebFactory != null)
      {
        return theHelloWebFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new HelloWebFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public HelloWebFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case HelloWebPackage.PROGRAM: return createProgram();
      case HelloWebPackage.MAIN: return createMain();
      case HelloWebPackage.RECORDED_FLIGHT: return createRecordedFlight();
      case HelloWebPackage.USER_FUNCTION: return createUserFunction();
      case HelloWebPackage.FEATURE_MATCH: return createFeatureMatch();
      case HelloWebPackage.SUPER_COMMAND: return createSuperCommand();
      case HelloWebPackage.COMMAND: return createCommand();
      case HelloWebPackage.SNAPSHOT: return createSnapshot();
      case HelloWebPackage.UP: return createUp();
      case HelloWebPackage.DOWN: return createDown();
      case HelloWebPackage.LEFT: return createLeft();
      case HelloWebPackage.RIGHT: return createRight();
      case HelloWebPackage.FORWARD: return createForward();
      case HelloWebPackage.BACKWARD: return createBackward();
      case HelloWebPackage.ROTATE_L: return createRotateL();
      case HelloWebPackage.ROTATE_R: return createRotateR();
      case HelloWebPackage.WAIT: return createWait();
      case HelloWebPackage.FUNCTION_NAME: return createFunctionName();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Program createProgram()
  {
    ProgramImpl program = new ProgramImpl();
    return program;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Main createMain()
  {
    MainImpl main = new MainImpl();
    return main;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RecordedFlight createRecordedFlight()
  {
    RecordedFlightImpl recordedFlight = new RecordedFlightImpl();
    return recordedFlight;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UserFunction createUserFunction()
  {
    UserFunctionImpl userFunction = new UserFunctionImpl();
    return userFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FeatureMatch createFeatureMatch()
  {
    FeatureMatchImpl featureMatch = new FeatureMatchImpl();
    return featureMatch;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SuperCommand createSuperCommand()
  {
    SuperCommandImpl superCommand = new SuperCommandImpl();
    return superCommand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Command createCommand()
  {
    CommandImpl command = new CommandImpl();
    return command;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Snapshot createSnapshot()
  {
    SnapshotImpl snapshot = new SnapshotImpl();
    return snapshot;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Up createUp()
  {
    UpImpl up = new UpImpl();
    return up;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Down createDown()
  {
    DownImpl down = new DownImpl();
    return down;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Left createLeft()
  {
    LeftImpl left = new LeftImpl();
    return left;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Right createRight()
  {
    RightImpl right = new RightImpl();
    return right;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Forward createForward()
  {
    ForwardImpl forward = new ForwardImpl();
    return forward;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Backward createBackward()
  {
    BackwardImpl backward = new BackwardImpl();
    return backward;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RotateL createRotateL()
  {
    RotateLImpl rotateL = new RotateLImpl();
    return rotateL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RotateR createRotateR()
  {
    RotateRImpl rotateR = new RotateRImpl();
    return rotateR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Wait createWait()
  {
    WaitImpl wait = new WaitImpl();
    return wait;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionName createFunctionName()
  {
    FunctionNameImpl functionName = new FunctionNameImpl();
    return functionName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public HelloWebPackage getHelloWebPackage()
  {
    return (HelloWebPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static HelloWebPackage getPackage()
  {
    return HelloWebPackage.eINSTANCE;
  }

} //HelloWebFactoryImpl
