/*
 * generated by Xtext 2.17.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class HelloWebGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.HelloWeb.Program");
		private final Assignment cMainAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cMainMainParserRuleCall_0 = (RuleCall)cMainAssignment.eContents().get(0);
		
		//Program:
		//	main=Main;
		@Override public ParserRule getRule() { return rule; }
		
		//main=Main
		public Assignment getMainAssignment() { return cMainAssignment; }
		
		//Main
		public RuleCall getMainMainParserRuleCall_0() { return cMainMainParserRuleCall_0; }
	}
	public class MainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.HelloWeb.Main");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cCommandsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cCommandsSnapshotParserRuleCall_0_0_0 = (RuleCall)cCommandsAssignment_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Assignment cTakeoffAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cTakeoffTakeoffParserRuleCall_1_0_0_0 = (RuleCall)cTakeoffAssignment_1_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cCommandsAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cCommandsSuperCommandParserRuleCall_1_1_0_0 = (RuleCall)cCommandsAssignment_1_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Assignment cLandAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final RuleCall cLandLandParserRuleCall_1_2_0_0 = (RuleCall)cLandAssignment_1_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		
		//Main:
		//	(commands+=Snapshot ';'?)? ((takeoff+=Takeoff ';'?) (commands+=SuperCommand ';'?)* (land+=Land ';'?))?;
		@Override public ParserRule getRule() { return rule; }
		
		//(commands+=Snapshot ';'?)? ((takeoff+=Takeoff ';'?) (commands+=SuperCommand ';'?)* (land+=Land ';'?))?
		public Group getGroup() { return cGroup; }
		
		//(commands+=Snapshot ';'?)?
		public Group getGroup_0() { return cGroup_0; }
		
		//commands+=Snapshot
		public Assignment getCommandsAssignment_0_0() { return cCommandsAssignment_0_0; }
		
		//Snapshot
		public RuleCall getCommandsSnapshotParserRuleCall_0_0_0() { return cCommandsSnapshotParserRuleCall_0_0_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }
		
		//((takeoff+=Takeoff ';'?) (commands+=SuperCommand ';'?)* (land+=Land ';'?))?
		public Group getGroup_1() { return cGroup_1; }
		
		//takeoff+=Takeoff ';'?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//takeoff+=Takeoff
		public Assignment getTakeoffAssignment_1_0_0() { return cTakeoffAssignment_1_0_0; }
		
		//Takeoff
		public RuleCall getTakeoffTakeoffParserRuleCall_1_0_0_0() { return cTakeoffTakeoffParserRuleCall_1_0_0_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_1_0_1() { return cSemicolonKeyword_1_0_1; }
		
		//(commands+=SuperCommand ';'?)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//commands+=SuperCommand
		public Assignment getCommandsAssignment_1_1_0() { return cCommandsAssignment_1_1_0; }
		
		//SuperCommand
		public RuleCall getCommandsSuperCommandParserRuleCall_1_1_0_0() { return cCommandsSuperCommandParserRuleCall_1_1_0_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_1_1_1() { return cSemicolonKeyword_1_1_1; }
		
		//land+=Land ';'?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//land+=Land
		public Assignment getLandAssignment_1_2_0() { return cLandAssignment_1_2_0; }
		
		//Land
		public RuleCall getLandLandParserRuleCall_1_2_0_0() { return cLandLandParserRuleCall_1_2_0_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_1_2_1() { return cSemicolonKeyword_1_2_1; }
	}
	public class RecordedFlightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.HelloWeb.RecordedFlight");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRECORDFLIGHTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVideo_nameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVideo_nameIDTerminalRuleCall_2_0 = (RuleCall)cVideo_nameAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RecordedFlight:
		//	'RECORDFLIGHT' '(' video_name=ID ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'RECORDFLIGHT' '(' video_name=ID ')'
		public Group getGroup() { return cGroup; }
		
		//'RECORDFLIGHT'
		public Keyword getRECORDFLIGHTKeyword_0() { return cRECORDFLIGHTKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//video_name=ID
		public Assignment getVideo_nameAssignment_2() { return cVideo_nameAssignment_2; }
		
		//ID
		public RuleCall getVideo_nameIDTerminalRuleCall_2_0() { return cVideo_nameIDTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class UserFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.HelloWeb.UserFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cFuncAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cFuncCommandParserRuleCall_3_0_0 = (RuleCall)cFuncAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//UserFunction:
		//	name=ID '()'
		//	'{' (func+=Command ';'?)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '()' '{' (func+=Command ';'?)* '}'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_1() { return cLeftParenthesisRightParenthesisKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(func+=Command ';'?)*
		public Group getGroup_3() { return cGroup_3; }
		
		//func+=Command
		public Assignment getFuncAssignment_3_0() { return cFuncAssignment_3_0; }
		
		//Command
		public RuleCall getFuncCommandParserRuleCall_3_0_0() { return cFuncCommandParserRuleCall_3_0_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class DownwardCameraElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.HelloWeb.DownwardCamera");
		private final Keyword cUSEDOWNWARDCAMERAKeyword = (Keyword)rule.eContents().get(1);
		
		//DownwardCamera:
		//	'USEDOWNWARDCAMERA';
		@Override public ParserRule getRule() { return rule; }
		
		//'USEDOWNWARDCAMERA'
		public Keyword getUSEDOWNWARDCAMERAKeyword() { return cUSEDOWNWARDCAMERAKeyword; }
	}
	public class FaceDetectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.HelloWeb.FaceDetect");
		private final Keyword cFACEDETECTKeyword = (Keyword)rule.eContents().get(1);
		
		//FaceDetect:
		//	'FACEDETECT';
		@Override public ParserRule getRule() { return rule; }
		
		//'FACEDETECT'
		public Keyword getFACEDETECTKeyword() { return cFACEDETECTKeyword; }
	}
	public class FeatureMatchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.HelloWeb.FeatureMatch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFEATUREMATCHKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cImage_nameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImage_nameIDTerminalRuleCall_2_0 = (RuleCall)cImage_nameAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FeatureMatch:
		//	'FEATUREMATCH' '(' image_name=ID ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'FEATUREMATCH' '(' image_name=ID ')'
		public Group getGroup() { return cGroup; }
		
		//'FEATUREMATCH'
		public Keyword getFEATUREMATCHKeyword_0() { return cFEATUREMATCHKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//image_name=ID
		public Assignment getImage_nameAssignment_2() { return cImage_nameAssignment_2; }
		
		//ID
		public RuleCall getImage_nameIDTerminalRuleCall_2_0() { return cImage_nameIDTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class TakeoffElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.HelloWeb.Takeoff");
		private final Keyword cTAKEOFFKeyword = (Keyword)rule.eContents().get(1);
		
		//Takeoff:
		//	'TAKEOFF';
		@Override public ParserRule getRule() { return rule; }
		
		//'TAKEOFF'
		public Keyword getTAKEOFFKeyword() { return cTAKEOFFKeyword; }
	}
	public class LandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.HelloWeb.Land");
		private final Keyword cLANDKeyword = (Keyword)rule.eContents().get(1);
		
		//Land:
		//	'LAND';
		@Override public ParserRule getRule() { return rule; }
		
		//'LAND'
		public Keyword getLANDKeyword() { return cLANDKeyword; }
	}
	public class SuperCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.HelloWeb.SuperCommand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCommandParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionNameParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SuperCommand:
		//	Command
		//	| FunctionName;
		@Override public ParserRule getRule() { return rule; }
		
		//Command | FunctionName
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Command
		public RuleCall getCommandParserRuleCall_0() { return cCommandParserRuleCall_0; }
		
		//FunctionName
		public RuleCall getFunctionNameParserRuleCall_1() { return cFunctionNameParserRuleCall_1; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.HelloWeb.Command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUpParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDownParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLeftParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRightParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cForwardParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cBackwardParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cRotateLParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cRotateRParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cWaitParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cSnapshotParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//Command:
		//	Up
		//	| Down
		//	| Left
		//	| Right
		//	| Forward
		//	| Backward
		//	| RotateL
		//	| RotateR
		//	| Wait
		//	| Snapshot;
		@Override public ParserRule getRule() { return rule; }
		
		//Up | Down | Left | Right | Forward | Backward | RotateL | RotateR | Wait | Snapshot
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Up
		public RuleCall getUpParserRuleCall_0() { return cUpParserRuleCall_0; }
		
		//Down
		public RuleCall getDownParserRuleCall_1() { return cDownParserRuleCall_1; }
		
		//Left
		public RuleCall getLeftParserRuleCall_2() { return cLeftParserRuleCall_2; }
		
		//Right
		public RuleCall getRightParserRuleCall_3() { return cRightParserRuleCall_3; }
		
		//Forward
		public RuleCall getForwardParserRuleCall_4() { return cForwardParserRuleCall_4; }
		
		//Backward
		public RuleCall getBackwardParserRuleCall_5() { return cBackwardParserRuleCall_5; }
		
		//RotateL
		public RuleCall getRotateLParserRuleCall_6() { return cRotateLParserRuleCall_6; }
		
		//RotateR
		public RuleCall getRotateRParserRuleCall_7() { return cRotateRParserRuleCall_7; }
		
		//Wait
		public RuleCall getWaitParserRuleCall_8() { return cWaitParserRuleCall_8; }
		
		//Snapshot
		public RuleCall getSnapshotParserRuleCall_9() { return cSnapshotParserRuleCall_9; }
	}
	public class SnapshotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.HelloWeb.Snapshot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSNAPSHOTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cImage_nameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImage_nameIDTerminalRuleCall_2_0 = (RuleCall)cImage_nameAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Snapshot:
		//	'SNAPSHOT' '(' image_name=ID ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'SNAPSHOT' '(' image_name=ID ')'
		public Group getGroup() { return cGroup; }
		
		//'SNAPSHOT'
		public Keyword getSNAPSHOTKeyword_0() { return cSNAPSHOTKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//image_name=ID
		public Assignment getImage_nameAssignment_2() { return cImage_nameAssignment_2; }
		
		//ID
		public RuleCall getImage_nameIDTerminalRuleCall_2_0() { return cImage_nameIDTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class UpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.HelloWeb.Up");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUPKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMillisecondsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMillisecondsINTTerminalRuleCall_2_0 = (RuleCall)cMillisecondsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Up:
		//	'UP' '(' milliseconds=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'UP' '(' milliseconds=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'UP'
		public Keyword getUPKeyword_0() { return cUPKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//milliseconds=INT
		public Assignment getMillisecondsAssignment_2() { return cMillisecondsAssignment_2; }
		
		//INT
		public RuleCall getMillisecondsINTTerminalRuleCall_2_0() { return cMillisecondsINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class DownElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.HelloWeb.Down");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDOWNKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMillisecondsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMillisecondsINTTerminalRuleCall_2_0 = (RuleCall)cMillisecondsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Down:
		//	'DOWN' '(' milliseconds=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'DOWN' '(' milliseconds=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'DOWN'
		public Keyword getDOWNKeyword_0() { return cDOWNKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//milliseconds=INT
		public Assignment getMillisecondsAssignment_2() { return cMillisecondsAssignment_2; }
		
		//INT
		public RuleCall getMillisecondsINTTerminalRuleCall_2_0() { return cMillisecondsINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class LeftElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.HelloWeb.Left");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLEFTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMillisecondsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMillisecondsINTTerminalRuleCall_2_0 = (RuleCall)cMillisecondsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Left:
		//	'LEFT' '(' milliseconds=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'LEFT' '(' milliseconds=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'LEFT'
		public Keyword getLEFTKeyword_0() { return cLEFTKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//milliseconds=INT
		public Assignment getMillisecondsAssignment_2() { return cMillisecondsAssignment_2; }
		
		//INT
		public RuleCall getMillisecondsINTTerminalRuleCall_2_0() { return cMillisecondsINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class RightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.HelloWeb.Right");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRIGHTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMillisecondsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMillisecondsINTTerminalRuleCall_2_0 = (RuleCall)cMillisecondsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Right:
		//	'RIGHT' '(' milliseconds=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'RIGHT' '(' milliseconds=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'RIGHT'
		public Keyword getRIGHTKeyword_0() { return cRIGHTKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//milliseconds=INT
		public Assignment getMillisecondsAssignment_2() { return cMillisecondsAssignment_2; }
		
		//INT
		public RuleCall getMillisecondsINTTerminalRuleCall_2_0() { return cMillisecondsINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ForwardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.HelloWeb.Forward");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFORWARDKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMillisecondsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMillisecondsINTTerminalRuleCall_2_0 = (RuleCall)cMillisecondsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Forward:
		//	'FORWARD' '(' milliseconds=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'FORWARD' '(' milliseconds=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'FORWARD'
		public Keyword getFORWARDKeyword_0() { return cFORWARDKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//milliseconds=INT
		public Assignment getMillisecondsAssignment_2() { return cMillisecondsAssignment_2; }
		
		//INT
		public RuleCall getMillisecondsINTTerminalRuleCall_2_0() { return cMillisecondsINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class BackwardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.HelloWeb.Backward");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBACKWARDKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMillisecondsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMillisecondsINTTerminalRuleCall_2_0 = (RuleCall)cMillisecondsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Backward:
		//	'BACKWARD' '(' milliseconds=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'BACKWARD' '(' milliseconds=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'BACKWARD'
		public Keyword getBACKWARDKeyword_0() { return cBACKWARDKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//milliseconds=INT
		public Assignment getMillisecondsAssignment_2() { return cMillisecondsAssignment_2; }
		
		//INT
		public RuleCall getMillisecondsINTTerminalRuleCall_2_0() { return cMillisecondsINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class RotateLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.HelloWeb.RotateL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cROTATELEFTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMillisecondsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMillisecondsINTTerminalRuleCall_2_0 = (RuleCall)cMillisecondsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RotateL:
		//	'ROTATELEFT' '(' milliseconds=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'ROTATELEFT' '(' milliseconds=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'ROTATELEFT'
		public Keyword getROTATELEFTKeyword_0() { return cROTATELEFTKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//milliseconds=INT
		public Assignment getMillisecondsAssignment_2() { return cMillisecondsAssignment_2; }
		
		//INT
		public RuleCall getMillisecondsINTTerminalRuleCall_2_0() { return cMillisecondsINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class RotateRElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.HelloWeb.RotateR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cROTATERIGHTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMillisecondsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMillisecondsINTTerminalRuleCall_2_0 = (RuleCall)cMillisecondsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RotateR:
		//	'ROTATERIGHT' '(' milliseconds=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'ROTATERIGHT' '(' milliseconds=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'ROTATERIGHT'
		public Keyword getROTATERIGHTKeyword_0() { return cROTATERIGHTKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//milliseconds=INT
		public Assignment getMillisecondsAssignment_2() { return cMillisecondsAssignment_2; }
		
		//INT
		public RuleCall getMillisecondsINTTerminalRuleCall_2_0() { return cMillisecondsINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class WaitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.HelloWeb.Wait");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWAITKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMillisecondsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMillisecondsINTTerminalRuleCall_2_0 = (RuleCall)cMillisecondsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Wait:
		//	'WAIT' '(' milliseconds=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'WAIT' '(' milliseconds=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'WAIT'
		public Keyword getWAITKeyword_0() { return cWAITKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//milliseconds=INT
		public Assignment getMillisecondsAssignment_2() { return cMillisecondsAssignment_2; }
		
		//INT
		public RuleCall getMillisecondsINTTerminalRuleCall_2_0() { return cMillisecondsINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class FunctionNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.HelloWeb.FunctionName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunc_nameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFunc_nameIDTerminalRuleCall_0_0 = (RuleCall)cFunc_nameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//FunctionName:
		//	func_name=ID '()';
		@Override public ParserRule getRule() { return rule; }
		
		//func_name=ID '()'
		public Group getGroup() { return cGroup; }
		
		//func_name=ID
		public Assignment getFunc_nameAssignment_0() { return cFunc_nameAssignment_0; }
		
		//ID
		public RuleCall getFunc_nameIDTerminalRuleCall_0_0() { return cFunc_nameIDTerminalRuleCall_0_0; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_1() { return cLeftParenthesisRightParenthesisKeyword_1; }
	}
	
	
	private final ProgramElements pProgram;
	private final MainElements pMain;
	private final RecordedFlightElements pRecordedFlight;
	private final UserFunctionElements pUserFunction;
	private final DownwardCameraElements pDownwardCamera;
	private final FaceDetectElements pFaceDetect;
	private final FeatureMatchElements pFeatureMatch;
	private final TakeoffElements pTakeoff;
	private final LandElements pLand;
	private final SuperCommandElements pSuperCommand;
	private final CommandElements pCommand;
	private final SnapshotElements pSnapshot;
	private final UpElements pUp;
	private final DownElements pDown;
	private final LeftElements pLeft;
	private final RightElements pRight;
	private final ForwardElements pForward;
	private final BackwardElements pBackward;
	private final RotateLElements pRotateL;
	private final RotateRElements pRotateR;
	private final WaitElements pWait;
	private final FunctionNameElements pFunctionName;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public HelloWebGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pMain = new MainElements();
		this.pRecordedFlight = new RecordedFlightElements();
		this.pUserFunction = new UserFunctionElements();
		this.pDownwardCamera = new DownwardCameraElements();
		this.pFaceDetect = new FaceDetectElements();
		this.pFeatureMatch = new FeatureMatchElements();
		this.pTakeoff = new TakeoffElements();
		this.pLand = new LandElements();
		this.pSuperCommand = new SuperCommandElements();
		this.pCommand = new CommandElements();
		this.pSnapshot = new SnapshotElements();
		this.pUp = new UpElements();
		this.pDown = new DownElements();
		this.pLeft = new LeftElements();
		this.pRight = new RightElements();
		this.pForward = new ForwardElements();
		this.pBackward = new BackwardElements();
		this.pRotateL = new RotateLElements();
		this.pRotateR = new RotateRElements();
		this.pWait = new WaitElements();
		this.pFunctionName = new FunctionNameElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.HelloWeb".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	main=Main;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Main:
	//	(commands+=Snapshot ';'?)? ((takeoff+=Takeoff ';'?) (commands+=SuperCommand ';'?)* (land+=Land ';'?))?;
	public MainElements getMainAccess() {
		return pMain;
	}
	
	public ParserRule getMainRule() {
		return getMainAccess().getRule();
	}
	
	//RecordedFlight:
	//	'RECORDFLIGHT' '(' video_name=ID ')';
	public RecordedFlightElements getRecordedFlightAccess() {
		return pRecordedFlight;
	}
	
	public ParserRule getRecordedFlightRule() {
		return getRecordedFlightAccess().getRule();
	}
	
	//UserFunction:
	//	name=ID '()'
	//	'{' (func+=Command ';'?)*
	//	'}';
	public UserFunctionElements getUserFunctionAccess() {
		return pUserFunction;
	}
	
	public ParserRule getUserFunctionRule() {
		return getUserFunctionAccess().getRule();
	}
	
	//DownwardCamera:
	//	'USEDOWNWARDCAMERA';
	public DownwardCameraElements getDownwardCameraAccess() {
		return pDownwardCamera;
	}
	
	public ParserRule getDownwardCameraRule() {
		return getDownwardCameraAccess().getRule();
	}
	
	//FaceDetect:
	//	'FACEDETECT';
	public FaceDetectElements getFaceDetectAccess() {
		return pFaceDetect;
	}
	
	public ParserRule getFaceDetectRule() {
		return getFaceDetectAccess().getRule();
	}
	
	//FeatureMatch:
	//	'FEATUREMATCH' '(' image_name=ID ')';
	public FeatureMatchElements getFeatureMatchAccess() {
		return pFeatureMatch;
	}
	
	public ParserRule getFeatureMatchRule() {
		return getFeatureMatchAccess().getRule();
	}
	
	//Takeoff:
	//	'TAKEOFF';
	public TakeoffElements getTakeoffAccess() {
		return pTakeoff;
	}
	
	public ParserRule getTakeoffRule() {
		return getTakeoffAccess().getRule();
	}
	
	//Land:
	//	'LAND';
	public LandElements getLandAccess() {
		return pLand;
	}
	
	public ParserRule getLandRule() {
		return getLandAccess().getRule();
	}
	
	//SuperCommand:
	//	Command
	//	| FunctionName;
	public SuperCommandElements getSuperCommandAccess() {
		return pSuperCommand;
	}
	
	public ParserRule getSuperCommandRule() {
		return getSuperCommandAccess().getRule();
	}
	
	//Command:
	//	Up
	//	| Down
	//	| Left
	//	| Right
	//	| Forward
	//	| Backward
	//	| RotateL
	//	| RotateR
	//	| Wait
	//	| Snapshot;
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//Snapshot:
	//	'SNAPSHOT' '(' image_name=ID ')';
	public SnapshotElements getSnapshotAccess() {
		return pSnapshot;
	}
	
	public ParserRule getSnapshotRule() {
		return getSnapshotAccess().getRule();
	}
	
	//Up:
	//	'UP' '(' milliseconds=INT ')';
	public UpElements getUpAccess() {
		return pUp;
	}
	
	public ParserRule getUpRule() {
		return getUpAccess().getRule();
	}
	
	//Down:
	//	'DOWN' '(' milliseconds=INT ')';
	public DownElements getDownAccess() {
		return pDown;
	}
	
	public ParserRule getDownRule() {
		return getDownAccess().getRule();
	}
	
	//Left:
	//	'LEFT' '(' milliseconds=INT ')';
	public LeftElements getLeftAccess() {
		return pLeft;
	}
	
	public ParserRule getLeftRule() {
		return getLeftAccess().getRule();
	}
	
	//Right:
	//	'RIGHT' '(' milliseconds=INT ')';
	public RightElements getRightAccess() {
		return pRight;
	}
	
	public ParserRule getRightRule() {
		return getRightAccess().getRule();
	}
	
	//Forward:
	//	'FORWARD' '(' milliseconds=INT ')';
	public ForwardElements getForwardAccess() {
		return pForward;
	}
	
	public ParserRule getForwardRule() {
		return getForwardAccess().getRule();
	}
	
	//Backward:
	//	'BACKWARD' '(' milliseconds=INT ')';
	public BackwardElements getBackwardAccess() {
		return pBackward;
	}
	
	public ParserRule getBackwardRule() {
		return getBackwardAccess().getRule();
	}
	
	//RotateL:
	//	'ROTATELEFT' '(' milliseconds=INT ')';
	public RotateLElements getRotateLAccess() {
		return pRotateL;
	}
	
	public ParserRule getRotateLRule() {
		return getRotateLAccess().getRule();
	}
	
	//RotateR:
	//	'ROTATERIGHT' '(' milliseconds=INT ')';
	public RotateRElements getRotateRAccess() {
		return pRotateR;
	}
	
	public ParserRule getRotateRRule() {
		return getRotateRAccess().getRule();
	}
	
	//Wait:
	//	'WAIT' '(' milliseconds=INT ')';
	public WaitElements getWaitAccess() {
		return pWait;
	}
	
	public ParserRule getWaitRule() {
		return getWaitAccess().getRule();
	}
	
	//FunctionName:
	//	func_name=ID '()';
	public FunctionNameElements getFunctionNameAccess() {
		return pFunctionName;
	}
	
	public ParserRule getFunctionNameRule() {
		return getFunctionNameAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
