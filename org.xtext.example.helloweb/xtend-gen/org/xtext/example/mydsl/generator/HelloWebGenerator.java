/**
 * generated by Xtext 2.17.0
 */
package org.xtext.example.mydsl.generator;

import com.google.common.collect.Iterables;
import java.io.IOException;
import java.io.PrintWriter;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.example.mydsl.helloWeb.Main;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class HelloWebGenerator extends AbstractGenerator {
  public CharSequence compile(final Main main) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("#! /usr/bin/env python");
    _builder.newLine();
    _builder.append("import rospy");
    _builder.newLine();
    _builder.append("from std_msgs.msg import Empty");
    _builder.newLine();
    _builder.append("from ardrone_autonomy.msg import Navdata\t\t");
    _builder.newLine();
    _builder.newLine();
    _builder.append("state = -1;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("def ReceiveNavdata(data):");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("global state");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("state = data.state");
    _builder.newLine();
    _builder.newLine();
    _builder.append("rospy.init_node(\'cipek\')");
    _builder.newLine();
    _builder.append("empty = Empty()");
    _builder.newLine();
    _builder.append("rospy.Subscriber(\'/ardrone/navdata\', Navdata, ReceiveNavdata)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("while state == -1:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("rospy.sleep(0.1)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("if state == 0:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("reset = rospy.Publisher(\'/ardrone/reset\', Empty, queue_size=1)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("while reset.get_num_connections() < 1:");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("rospy.sleep(0.1)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("reset.publish(empty)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("while state == 0:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("rospy.sleep(0.1)");
    _builder.newLine();
    _builder.newLine();
    {
      EList<String> _takeoff = main.getTakeoff();
      for(final String to : _takeoff) {
        _builder.append("takeoff = rospy.Publisher(\'/ardrone/takeoff\', Empty, queue_size=1)");
        _builder.newLine();
        _builder.newLine();
        _builder.append("while takeoff.get_num_connections() < 1:");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("rospy.sleep(0.1)");
        _builder.newLine();
        _builder.newLine();
        _builder.append("takeoff.publish(empty)");
        _builder.newLine();
        _builder.append("rospy.sleep(5)");
        _builder.newLine();
      }
    }
    _builder.newLine();
    {
      EList<String> _land = main.getLand();
      for(final String to_1 : _land) {
        _builder.append("land = rospy.Publisher(\'/ardrone/land\', Empty, queue_size=1)");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.newLine();
        _builder.append("while land.get_num_connections() < 1:");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("rospy.sleep(0.1)");
        _builder.newLine();
        _builder.newLine();
        _builder.append("land.publish(empty)");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    String result = "";
    Iterable<Main> _filter = Iterables.<Main>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Main.class);
    for (final Main main : _filter) {
      {
        result = this.compile(main).toString();
        fsa.generateFile("result.py", result);
      }
    }
    try {
      PrintWriter writer = new PrintWriter("WebRoot/result.py", "UTF-8");
      writer.println(result);
      writer.close();
    } catch (final Throwable _t) {
      if (_t instanceof IOException) {
      } else {
        throw Exceptions.sneakyThrow(_t);
      }
    }
    fsa.generateFile("result.py", result);
  }
}
